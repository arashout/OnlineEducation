// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1, otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1, otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:

   //Zero x input?
   Mux16(a=x, b=false, sel=zx, out=x0);

   //Negate x input?
   Not16(in=x0, out=xn0);
   Mux16(a=x0, b=xn0, sel=nx, out=x1);

   //Zero y input?
   Mux16(a=y, b=false, sel=zy, out=y0);
   
   //Negate y input?
   Not16(in=y0, out=yn0);
   Mux16(a=y0, b=yn0, sel=ny, out=y1);

   //Add x + y or bitwise AND
   Add16(a=x1, b=y1, out=xplusy);
   And16(a=x1, b=y1, out=xandy);
   Mux16(a=xandy, b=xplusy, sel=f, out=out0);

   //Negate output?
   Not16(in=out0, out=on0);
   Mux16(a=out0, b=on0, sel=no, out=out, 
   out[0]=o0,
   out[1]=o1,
   out[2]=o2,
   out[3]=o3,
   out[4]=o4,
   out[5]=o5,
   out[6]=o6,
   out[7]=o7,
   out[8]=o8,
   out[9]=o9,
   out[10]=o10,
   out[11]=o11,
   out[12]=o12,
   out[13]=o13,
   out[14]=o14,
   out[15]=o15
   );

   //Determine if output is zero
   Or(a=o0, b=false, out=oo0);
   Or(a=o1, b=oo0, out=oo1);
   Or(a=o2, b=oo1, out=oo2);
   Or(a=o3, b=oo2, out=oo3);
   Or(a=o4, b=oo3, out=oo4);
   Or(a=o5, b=oo4, out=oo5);
   Or(a=o6, b=oo5, out=oo6);
   Or(a=o7, b=oo6, out=oo7);
   Or(a=o8, b=oo7, out=oo8);
   Or(a=o9, b=oo8, out=oo9);
   Or(a=o10, b=oo9, out=oo10);
   Or(a=o11, b=oo10, out=oo11);
   Or(a=o12, b=oo11, out=oo12);
   Or(a=o13, b=oo12, out=oo13);
   Or(a=o14, b=oo13, out=oo14);
   Or(a=o15, b=oo14, out=oo15);
   Not(in=oo15,out=zr);

   //Check if output is negative
   And(a=o15, b=true, out=ng);
}