// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    //Use i-bit to determine whether A instruction or C instruction
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=outMux1);


    //Use destination bit to determine whether to save or not

    Not(in=instruction[15], out=notABit);
    Or(a=notABit, b=instruction[5], out=bolA);
    ARegister(in=outMux1, load=bolA, out[0..14]=addressM, out=outA);
    
    And(a=instruction[15], b=instruction[4], out=bolD);
    DRegister(in=outALU, load=bolD, out=outD);

    And(a=instruction[15], b=instruction[3], out=writeM);
    
    //ALU

    //Use a-bit to determine whether to use A or M 
    Mux16(a=outA, b=inM, sel=instruction[12], out=outMux2);

    ALU(x=outD,
        y=outMux2,
        zx=instruction[11], // Zero the x input
        nx=instruction[10], // Negate the x input
        zy=instruction[9], // Zero the y input
        ny=instruction[8], // Negate the y input
        f=instruction[7],  // Function code: 1 for add, 0 for and
        no=instruction[6], // Negate the out output
        zr=zr,
        ng=ng,
        out=outM,
        out=outALU
        );


    //Jump conditionals
    And(a=false, b=false, out=case0f); //No jump

    Or(a=zr, b=ng, out=case1i);
    Not(in=case1i, out=case1); //out>0
    And(a=instruction[15], b=case1, out=case1f);

    And(a=true, b=zr, out=case2); //out=0
    And(a=instruction[15], b=case2, out=case2f);

    Not(in=ng, out=case3); //out>=0
    And(a=instruction[15], b=case3, out=case3f);

    And(a=true, b=ng, out=case4); //out<0
    And(a=instruction[15], b=case4, out=case4f);

    Not(in=zr, out=case5); //out!=0
    And(a=instruction[15], b=case5, out=case5f);

    Or(a=zr, b=ng, out=case6); //out<=0
    And(a=instruction[15], b=case6, out=case6f);

    Nand(a=false, b=false, out=case7); //Jump
    And(a=instruction[15], b=case7, out=case7f);

    Mux8Way16(a[0]=case0f,
        b[0]=case1f,
        c[0]=case2f,
        d[0]=case3f,
        e[0]=case4f,
        f[0]=case5f,
        g[0]=case6f,
        h[0]=case7f,
        sel=instruction[0..2],
        out[0]=load
        );

    PC(in=outA, inc=true, reset=reset, load=load, out[0..14]=pc);
}